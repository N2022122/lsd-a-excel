# -*- coding: utf-8 -*-
"""app.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1yTlf2aDbrs08D0kFOw0micbmAoz15UBw
"""

import streamlit as st
import pdfplumber
import pandas as pd
import re
import io

# ==========================
# Funci√≥n para limpiar espacios
# ==========================
def limpiar_linea(line):
    return re.sub(r"\s+", " ", line).strip()

# ==========================
# Funci√≥n principal de conversi√≥n
# ==========================
def procesar_pdf(pdf_file):
    empleados = []

    with pdfplumber.open(pdf_file) as pdf:
        for page in pdf.pages:
            text = page.extract_text()

            # Eliminar info irrelevante
            text = re.sub(r"\*.*\*", "", text)  # c√≥digos de barras
            text = re.sub(r"PAGINA\s+\d+\s+de\s+\d+", "", text)
            text = re.sub(r"IDENTIFICADOR UNICO DEL LIBRO.*", "", text)
            text = re.sub(r"LIBRO ESPECIAL DE SUELDOS.*", "", text, flags=re.DOTALL)
            text = re.sub(r"LEGAJO\s+CUIL\s+APELLIDO Y NOMBRE.*", "", text)
            text = re.sub(r"DOCUMENTO\s+FECHA NACIMIENTO.*", "", text)
            text = re.sub(r"NACIONALIDAD\s+CATEGORIA.*", "", text)
            text = re.sub(r"MODALIDAD DE CONTRATACION.*", "", text)
            text = re.sub(r"CONCEPTOS\s+PERIODO.*", "", text)

            lines = [limpiar_linea(l) for l in text.split("\n") if l.strip()]

            i = 0
            while i < len(lines):
                linea = lines[i]

                # Buscar si la l√≠nea comienza con Legajo + CUIL
                if re.match(r"^\d+\s+\d{2}-\d{8}-\d", linea):

                    # --- EXTRAER DATOS DEL PRIMER RENGL√ìN ---
                    match_linea1 = re.match(r"(\d+)\s+(\d{2}-\d{8}-\d)\s+(.*?)\s+(\d{2}/\d{2}/\d{4})", linea)
                    if match_linea1:
                        legajo = match_linea1.group(1)
                        cuil = match_linea1.group(2)
                        apellido_nombre = match_linea1.group(3).strip()
                        fecha_ingreso = match_linea1.group(4)

                        resto_linea1 = linea[match_linea1.end():].strip()

                        # Buscar Fecha Cese, Documento y Fecha Nacimiento
                        match_resto = re.search(r"(\S+)\s+DNI\s+(\S+)\s+(\S+)", resto_linea1)
                        if match_resto:
                            fecha_cese = match_resto.group(1)
                            doc_num = match_resto.group(2)
                            fecha_nac = match_resto.group(3)
                        else:
                            fecha_cese = None
                            doc_num = None
                            fecha_nac = None

                        # L√≠nea 2: Nacionalidad, Categor√≠a y Obra Social
                        i += 1
                        linea2 = lines[i]
                        partes = linea2.split(maxsplit=1)
                        nacionalidad = partes[0]
                        resto_linea2 = partes[1]

                        match_obra_social = re.search(r'\s(\d+\s-\s.+)$', resto_linea2)
                        if match_obra_social:
                            obra_social = match_obra_social.group(1).strip()
                            categoria = resto_linea2[:match_obra_social.start()].strip()
                        else:
                            categoria = resto_linea2.strip()
                            obra_social = None

                        # L√≠nea 3: Modalidad de Contrataci√≥n, Convenio, Puesto
                        i += 1
                        linea3 = lines[i]

                        patron_campos = r'^(\d+\s-\s.+?)\s+(\d+/\d+\s-\s.+?)\s+(\d+\s-\s.+?)$'
                        match_campos = re.search(patron_campos, linea3)

                        if match_campos:
                            modalidad_contratacion = match_campos.group(1).strip()
                            convenio_colectivo = match_campos.group(2).strip()
                            puesto = match_campos.group(3).strip()
                        else:
                            modalidad_contratacion = None
                            convenio_colectivo = None
                            puesto = None

                        empleados.append({
                            "Legajo": legajo,
                            "CUIL": cuil,
                            "Apellido y Nombre": apellido_nombre,
                            "Fecha Ingreso": fecha_ingreso,
                            "Fecha Cese": fecha_cese,
                            "Documento": doc_num,
                            "Fecha Nacimiento": fecha_nac,
                            "Nacionalidad": nacionalidad,
                            "Categoria": categoria,
                            "Obra Social": obra_social,
                            "Modalidad de Contratacion": modalidad_contratacion,
                            "Convenio Colectivo": convenio_colectivo,
                            "Puesto": puesto
                        })
                i += 1

    return pd.DataFrame(empleados)

# ==========================
# Interfaz en Streamlit
# ==========================
st.title("üìÑ Conversor PDF ‚Üí Excel (Libro de Sueldos)")

uploaded_file = st.file_uploader("Sub√≠ tu archivo PDF", type=["pdf"])

if uploaded_file is not None:
    with st.spinner("Procesando PDF..."):
        df = procesar_pdf(uploaded_file)

    st.success("‚úÖ Procesamiento completado")
    st.dataframe(df.head())

    # Exportar a Excel en memoria
    output = io.BytesIO()
    df.to_excel(output, index=False, engine="openpyxl")
    excel_data = output.getvalue()

    st.download_button(
        label="‚¨áÔ∏è Descargar Excel",
        data=excel_data,
        file_name="Libro_Sueldos_Datos_Empleados.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )